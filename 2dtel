import numpy as np
import matplotlib.pyplot as plt

# ---------------------------
# 1) Simulation Parameters
# ---------------------------
Nx, Ny = 5, 5      # grid dimensions
C = 1e-6           # capacitor to ground at each node
alpha = 2e-4       # growth rate for G
mu    = 1e-4       # decay rate for G
dt    = 1e-5       # time step
tmax  = 0.002      # total sim time
drive_freq = 2e4   # 20 kHz wave
drive_amp  = 1.0   # amplitude

# ---------------------------
# 2) Initialize state arrays
# ---------------------------
ntsteps = int(tmax / dt)
time = np.linspace(0, tmax, ntsteps)

# Node voltages (2D array)
V = np.zeros((Nx, Ny), dtype=float)

# Horizontal conductors: shape (Nx-1, Ny)
Gx = np.ones((Nx-1, Ny), dtype=float) * 1e-3
# Vertical conductors: shape (Nx, Ny-1)
Gy = np.ones((Nx, Ny-1), dtype=float) * 1e-3

# Weâ€™ll track the time evolution of mean Gx and mean V for simple plotting:
Nsave = 50
save_steps = max(1, ntsteps // Nsave)
V_history  = []
Gx_history = []

# ---------------------------
# 3) Boundary Conditions
# ---------------------------
def drive_voltage(t):
    """Sinusoidal drive for left edge."""
    return drive_amp * np.sin(2.0*np.pi*drive_freq*t)

def apply_boundaries(V, t):
    """
    Left edge (i=0): driven by drive_voltage(t).
    Right edge (i=Nx-1): set to 0 V (ground).
    """
    for j in range(Ny):
        V[0,j] = drive_voltage(t)    # left edge drive
    for j in range(Ny):
        V[Nx-1,j] = 0.0              # right edge ground

# ---------------------------
# 4) Compute Currents
# ---------------------------
def compute_currents(V, Gx, Gy):
    """
    Returns Ix, Iy arrays for horizontal/vertical currents.
    Ix[i,j] = current from (i,j)->(i+1,j)
    Iy[i,j] = current from (i,j)->(i,j+1)
    """
    Ix = np.zeros((Nx-1, Ny), dtype=float)
    for i in range(Nx-1):
        for j in range(Ny):
            Ix[i,j] = Gx[i,j] * (V[i,j] - V[i+1,j])

    Iy = np.zeros((Nx, Ny-1), dtype=float)
    for i in range(Nx):
        for j in range(Ny-1):
            Iy[i,j] = Gy[i,j] * (V[i,j] - V[i,j+1])
    return Ix, Iy

# ---------------------------
# 5) Time-Stepping
# ---------------------------
for step in range(ntsteps):
    t = step * dt

    # 5.1) Apply boundary conditions
    apply_boundaries(V, t)

    # 5.2) Compute currents
    Ix, Iy = compute_currents(V, Gx, Gy)

    # 5.3) Update node voltages (Euler)
    dV = np.zeros_like(V)
    # interior nodes
    for i in range(1, Nx-1):
        for j in range(1, Ny-1):
            I_left  = -Ix[i-1,j] if i>0 else 0.0
            I_right =  Ix[i,j]   if i<Nx-1 else 0.0
            I_down  = -Iy[i,j-1] if j>0 else 0.0
            I_up    =  Iy[i,j]   if j<Ny-1 else 0.0
            net_current = I_left + I_right + I_down + I_up
            dV[i,j] = net_current / C

    # edges (excluding corners which are pinned)
    for i in range(1, Nx-1):
        # top row (j=0)
        j = 0
        I_left  = -Ix[i-1,j] if i>0 else 0.0
        I_right =  Ix[i,j]   if i<Nx-1 else 0.0
        I_up    =  Iy[i,j]   if j<Ny-1 else 0.0
        # no j-1 => no downward
        net_current = I_left + I_right + I_up
        dV[i,j] = net_current / C

        # bottom row (j=Ny-1)
        j = Ny-1
        I_left  = -Ix[i-1,j] if i>0 else 0.0
        I_right =  Ix[i,j]   if i<Nx-1 else 0.0
        I_down  = -Iy[i,j-1] if j>0 else 0.0
        net_current = I_left + I_right + I_down
        dV[i,j] = net_current / C

    # Euler update for node voltages
    for i in range(1, Nx-1):
        for j in range(1, Ny-1):
            V[i,j] += dt * dV[i,j]
        V[i,0] += dt * dV[i,0]
        V[i,Ny-1] += dt * dV[i,Ny-1]

    # 5.4) Update conductances (ARP)
    for i in range(Nx-1):
        for j in range(Ny):
            dGdt = alpha * abs(Ix[i,j]) - mu * Gx[i,j]
            Gx[i,j] += dt * dGdt
            if Gx[i,j] < 0.0:
                Gx[i,j] = 0.0

    for i in range(Nx):
        for j in range(Ny-1):
            dGdt = alpha * abs(Iy[i,j]) - mu * Gy[i,j]
            Gy[i,j] += dt * dGdt
            if Gy[i,j] < 0.0:
                Gy[i,j] = 0.0

    # 5.5) Save some data
    if step % save_steps == 0:
        Gx_history.append(np.mean(Gx))
        V_history.append(np.mean(V))

# Convert lists to arrays
Gx_history = np.array(Gx_history)
V_history  = np.array(V_history)
snap_times = np.linspace(0, tmax, len(V_history))

# ---------------------------
# 6) Plot Summaries
# ---------------------------
plt.figure(figsize=(10,4))

plt.subplot(1,2,1)
plt.plot(snap_times, Gx_history, 'b-', label='Mean Gx')
plt.xlabel("Time (s)")
plt.ylabel("Mean Conductor G (S)")
plt.title("Avg Horizontal Conductance Over Time")
plt.legend()

plt.subplot(1,2,2)
plt.plot(snap_times, V_history, 'r-', label='Mean Node V')
plt.xlabel("Time (s)")
plt.ylabel("Mean Node Voltage (V)")
plt.title("Avg Node Voltage Over Time")
plt.legend()

plt.tight_layout()
plt.show()

# ---------------------------
# 7) Final Heatmaps
# ---------------------------
# We'll plot the final distribution of Gx and V
plt.figure(figsize=(12,5))

plt.subplot(1,3,1)
plt.imshow(Gx, cmap='viridis', interpolation='nearest')
plt.colorbar()
plt.title("Final Gx Distribution")

plt.subplot(1,3,2)
plt.imshow(Gy, cmap='viridis', interpolation='nearest')
plt.colorbar()
plt.title("Final Gy Distribution")

plt.subplot(1,3,3)
plt.imshow(V, cmap='plasma', interpolation='nearest')
plt.colorbar()
plt.title("Final Node Voltages")

plt.show()

print("Done! Final average Gx =", np.mean(Gx),
      "Final average Gy =", np.mean(Gy))
print("Final mean node voltage =", np.mean(V))